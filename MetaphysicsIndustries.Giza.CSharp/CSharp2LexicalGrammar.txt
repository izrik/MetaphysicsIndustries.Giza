





/*
 *  Annex A Grammar
 *  443
 *  Annex A. Grammar
 *  This clause is informative.
 *  This annex contains summaries of the lexical and syntactic grammars found in the main document, and of
 *  the grammar extensions for unsafe code. Grammar productions appear here in the same order that they
 *  appear in the main document.
 *  A.1 Lexical grammar
 */

input = input-section?;

//input-section = ( input-section-part | input-section input-section-part );
//this one causes an infinite regression
input-section = input-section-part+;

input-section-part = ( input-elements? new-line | pp-directive );

input-elements = input-element+;

input-element = ( whitespace | comment | token );

// A.1.1 Line terminators

new-line = ( '\x000d\x000a' | '\x000d' | '\x000a' | '\x2085' | '\x2028' | '\x2029' );



/* 
 * A.1.2 White space
 */

whitespace = [ \t\x0009\x0008\x000c]+;
//Any character with Unicode class Zs


/*
 * A.1.3 Comments
 */

comment = ( single-line-comment | delimited-comment );

input-characters = [^\n\r\x0085\x2028\x2029]+;

single-line-comment = '//' input-characters?;
// Any Unicode character except a new-line-character

/* new-line-character::
   Carriage return character (U+000D)
   Line feed character (U+000A)
   Next line character (U+0085)
   Line separator character (U+2028)
   Paragraph separator character (U+2029)
 */

delimited-comment = '/*' ( [^*] | '*'+ [^/] )* '*'+ '/';

/*
 * A.1.4 Tokens
 */

token = ( identifier | keyword | integer-literal | real-literal | character-literal | string-literal | operator-or-punctuator );


// A.1.5 Unicode escape sequences

unicode-escape-sequence = (
	'\\u' hex-digit hex-digit hex-digit hex-digit | 
	'\\U' hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit );

// A.1.6 Identifiers

identifier = ( available-identifier | '@' identifier-or-keyword );

available-identifier = identifier-or-keyword;
//An identifier-or-keyword that is not a keyword

identifier-or-keyword = [\l_] [\l\d_]*;

/*  identifier-start-character::
 *  letter-character
 *  _ (the underscore character U+005F)
 *
 *  identifier-part-characters::
 *  identifier-part-character
 *  identifier-part-characters identifier-part-character
 *
 *  identifier-part-character::
 *  letter-character
 *  decimal-digit-character
 *  connecting-character
 *  combining-character
 *  formatting-character
 *
 *  letter-character::
 *  A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl
 *  A unicode-escape-sequence representing a character of classes Lu, Ll, Lt, Lm, Lo, or Nl
 *
 *  combining-character::
 *  A Unicode character of classes Mn or Mc
 *  A unicode-escape-sequence representing a character of classes Mn or Mc
 *
 *  decimal-digit-character::
 *  A Unicode character of the class Nd
 *  A unicode-escape-sequence representing a character of the class Nd
 *
 *  connecting-character::
 *  A Unicode character of the class Pc
 *  A unicode-escape-sequence representing a character of the class Pc
 *
 *  formatting-character::
 *  A Unicode character of the class Cf
 *  A unicode-escape-sequence representing a character of the class Cf
 */

// A.1.7 Keywords

keyword = (
	'abstract' | 'as' | 'base' | 'bool' | 'break' | 
	'byte' | 'case' | 'catch' | 'char' | 'checked' | 
	'class' | 'const' | 'continue' | 'decimal' | 'default' | 
	'delegate' | 'do' | 'double' | 'else' | 'enum' | 
	'event' | 'explicit' | 'extern' | 'false' | 'finally' | 
	'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 
	'if' | 'implicit' | 'in' | 'int' | 'interface' | 
	'internal' | 'is' | 'lock' | 'long' | 'namespace' | 
	'new' | 'null' | 'object' | 'operator' | 'out' | 
	'override' | 'params' | 'private' | 'protected' | 'public' | 
	'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 
	'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 
	'struct' | 'switch' | 'this' | 'throw' | 'true' | 
	'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 
	'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 
	'volatile' | 'while' );

//A.1.8 Literals

literal = ( boolean-literal | integer-literal | real-literal | character-literal | string-literal | null-literal );

boolean-literal = ( 'true' | 'false' );

integer-literal = ( decimal-integer-literal | hexadecimal-integer-literal );

decimal-integer-literal = [\d]+ integer-type-suffix?;

decimal-digits = decimal-digit+;
decimal-digit = [\d];

<ignore case>
integer-type-suffix = ('l'? 'u' | 'u'? 'l');
//U u L l UL Ul uL ul LU Lu lU lu

<ignore case>
hexadecimal-integer-literal = '0x' hex-digits integer-type-suffix?;

hex-digits = hex-digit+;

<ignore case>
hex-digit = [\dabcdef];

real-literal = (
    decimal-digits '.' decimal-digits exponent-part? real-type-suffix?
  | '.' decimal-digits exponent-part? real-type-suffix?
  | decimal-digits exponent-part real-type-suffix?
  | decimal-digits real-type-suffix );

<ignore case>
exponent-part = 'e' [+-]? [\d]+;


<ignore case>
real-type-suffix = [fdm];

character-literal = '\'' character '\'';

character = ( single-character | simple-escape-sequence | hexadecimal-escape-sequence | unicode-escape-sequence );

single-character = [^\\'\n\r\x0085\x2028\x2029];
//Any character except ' (U+0027), \ (U+005C), and new-line-character

simple-escape-sequence = '\\' ["\\0abfnrtv];

hexadecimal-escape-sequence = '\\x' hex-digit hex-digit? hex-digit? hex-digit?;

string-literal = ( regular-string-literal | verbatim-string-literal );

regular-string-literal = '"' regular-string-literal-character* '"';

regular-string-literal-character = (
    single-regular-string-literal-character
  | simple-escape-sequence
  | hexadecimal-escape-sequence
  | unicode-escape-sequence );

single-regular-string-literal-character = [^"\\\n\r\x0085\x2028\x2029];
//Any character except " (U+0022), \ (U+005C), and new-line-character

verbatim-string-literal = '@"' verbatim-string-literal-character* '"';

verbatim-string-literal-character = ( [^"] | '""' );

null-literal = 'null';

// A.1.9 Operators and punctuators

operator-or-punctuator = (
    '{' | '}' | '[' | ']' | '(' | ')' | '.' | ',' | ':' | ';' | 
    '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '!' | '~' | 
    '=' | '<' | '>' | '?' | '??' | '::' | '++' | '--' | '&&' | '||' | 
    '->' | '==' | '!=' | '<=' | '>=' | '+=' | '-=' | '*=' | '/=' | '%=' | 
    '&=' | '|=' | '^=' | '<<' | '<<=' );

right-shift = '>' '>';
right-shift-assignment = '>' '>=';

//A.1.10 Pre-processing directives

pp-directive = (
    pp-declaration
  | pp-conditional
  | pp-line
  | pp-diagnostic
  | pp-region
  | pp-pragma );

conditional-symbol = ( identifier );
//Any keyword except true or false

//pp-expression = whitespace? pp-or-expression whitespace?;
pp-expression = pp-sub-expression ( whitespace? pp-operator whitespace? pp-sub-expression )*;
pp-sub-expression = ( pp-unary-expression | pp-primary-expression );
pp-operator = ( '&&' | '||' | '==' | '!=' );

//pp-or-expression = ( pp-and-expression | pp-or-expression whitespace? '||' whitespace? pp-and-expression );

//pp-and-expression = ( pp-equality-expression | pp-and-expression whitespace? '&&' whitespace? pp-equality-expression );

//pp-equality-expression = ( pp-unary-expression | pp-equality-expression whitespace? ('==' | '!=') whitespace? pp-unary-expression );

//pp-unary-expression = ( pp-primary-expression | '!' whitespace? pp-unary-expression );
pp-unary-expression = '!' whitespace? pp-sub-expression;

pp-primary-expression = ( 'true' | 'false' | conditional-symbol | '(' whitespace? pp-expression whitespace? ')' );

pp-declaration = whitespace? '#' whitespace? ('define'|'undef') whitespace conditional-symbol pp-new-line;

pp-new-line = whitespace? single-line-comment? new-line;

pp-conditional = pp-if-section pp-elif-sections? pp-else-section* pp-endif;

pp-if-section = whitespace? '#' whitespace? 'if' whitespace pp-expression pp-new-line conditional-section?;

pp-elif-sections = pp-elif-section+;
pp-elif-section = whitespace? '#' whitespace? 'elif' whitespace pp-expression pp-new-line conditional-section?;

pp-else-section = whitespace? '#' whitespace? 'else' pp-new-line conditional-section?;

pp-endif = whitespace? '#' whitespace? 'endif' pp-new-line;

conditional-section = ( input-section | skipped-section );

skipped-section = skipped-section-part+;

skipped-section-part = ( whitespace? skipped-characters? new-line | pp-directive );

skipped-characters = [^#] input-characters?;


pp-line = whitespace? '#' whitespace? 'line' whitespace line-indicator pp-new-line;

line-indicator = ( [\d]+ whitespace file-name | [\d]+ | identifier-or-keyword );

file-name = '"' file-name-character+ '"';

file-name-character = [^"\n\r\x0085\x2028\x2029];
//Any character except " (U+0022), and new-line-character

pp-diagnostic = whitespace? '#' whitespace? ('error'|'warning') pp-message;

pp-message = ( new-line | whitespace input-characters? new-line );

pp-region = pp-start-region conditional-section? pp-end-region;

pp-start-region = whitespace? '#' whitespace? 'region' pp-message;

pp-end-region = whitespace? '#' whitespace? 'endregion' pp-message;

//note: this is a syntactic definition, rather than a lexical definition, in Ecma-334
pp-pragma = whitespace? '#' whitespace? 'pragma' pp-pragma-text;

//note: this is a syntactic definition, rather than a lexical definition, in Ecma-334
pp-pragma-text = ( whitespace input-characters? )? new-line;




